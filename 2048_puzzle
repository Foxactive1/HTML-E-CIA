<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>2048 - Mobile</title>
  <!-- Adicionando o Bootstrap -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #faf8ef;
      color: #776e65;
      text-align: center;
      margin: 0;
      padding: 0;
    }

    .container {
      max-width: 400px;
      margin: 0 auto;
    }

    h1 {
      font-size: 3rem;
      margin-bottom: 20px;
    }

    #game-board {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 10px;
      background-color: #bbada0;
      padding: 10px;
      border-radius: 10px;
      touch-action: none;
    }

    .tile {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 80px;
      height: 80px;
      background-color: #cdc1b4;
      font-size: 1.5rem;
      font-weight: bold;
      border-radius: 5px;
      color: #776e65;
    }

    .tile[data-value="2"] { background-color: #eee4da; }
    .tile[data-value="4"] { background-color: #ede0c8; }
    .tile[data-value="8"] { background-color: #f2b179; color: #f9f6f2; }
    .tile[data-value="16"] { background-color: #f59563; color: #f9f6f2; }
    .tile[data-value="32"] { background-color: #f67c5f; color: #f9f6f2; }
    .tile[data-value="64"] { background-color: #f65e3b; color: #f9f6f2; }
    .tile[data-value="128"] { background-color: #edcf72; color: #f9f6f2; }
    .tile[data-value="256"] { background-color: #edcc61; color: #f9f6f2; }
    .tile[data-value="512"] { background-color: #edc850; color: #f9f6f2; }
    .tile[data-value="1024"] { background-color: #edc53f; color: #f9f6f2; }
    .tile[data-value="2048"] { background-color: #edc22e; color: #f9f6f2; }

    .info {
      margin-top: 20px;
      font-size: 1rem;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>2048</h1>
    <div id="game-board"></div>
    <div class="info">
      <p>Arraste ou use as teclas de seta!</p>
      <p id="score">Pontuação: 0</p>
    </div>
  </div>

  <script>
    const boardSize = 4;
    let board = [];
    let score = 0;

    const gameBoard = document.getElementById("game-board");
    const scoreDisplay = document.getElementById("score");

    function initBoard() {
      board = Array(boardSize).fill(null).map(() => Array(boardSize).fill(0));
      addNewTile();
      addNewTile();
      updateBoard();
    }

    function addNewTile() {
      const emptyTiles = [];
      for (let row = 0; row < boardSize; row++) {
        for (let col = 0; col < boardSize; col++) {
          if (board[row][col] === 0) {
            emptyTiles.push({ row, col });
          }
        }
      }

      if (emptyTiles.length > 0) {
        const { row, col } = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];
        board[row][col] = Math.random() > 0.1 ? 2 : 4;
      }
    }

    function updateBoard() {
      gameBoard.innerHTML = "";
      board.forEach(row => {
        row.forEach(value => {
          const tile = document.createElement("div");
          tile.className = "tile";
          if (value > 0) {
            tile.textContent = value;
            tile.setAttribute("data-value", value);
          }
          gameBoard.appendChild(tile);
        });
      });

      scoreDisplay.textContent = `Pontuação: ${score}`;
    }

    function slide(row) {
      const filteredRow = row.filter(value => value > 0);
      while (filteredRow.length < boardSize) filteredRow.push(0);
      return filteredRow;
    }

    function combine(row) {
      for (let i = 0; i < row.length - 1; i++) {
        if (row[i] === row[i + 1] && row[i] !== 0) {
          row[i] *= 2;
          row[i + 1] = 0;
          score += row[i];
        }
      }
      return row;
    }

    function slideAndCombine(row) {
      row = slide(row);
      row = combine(row);
      return slide(row);
    }

    function handleMove(direction) {
      const originalBoard = JSON.stringify(board);

      if (direction === "up") {
        board = rotateBoard(false);
        board = board.map(slideAndCombine);
        board = rotateBoard(true);
      } else if (direction === "down") {
        board = rotateBoard(true);
        board = board.map(slideAndCombine);
        board = rotateBoard(false);
      } else if (direction === "left") {
        board = board.map(slideAndCombine);
      } else if (direction === "right") {
        board = board.map(row => row.reverse()).map(slideAndCombine).map(row => row.reverse());
      }

      if (JSON.stringify(board) !== originalBoard) {
        addNewTile();
        updateBoard();
      }
    }

    function rotateBoard(clockwise = true) {
      const newBoard = Array(boardSize).fill(null).map(() => Array(boardSize).fill(0));
      for (let row = 0; row < boardSize; row++) {
        for (let col = 0; col < boardSize; col++) {
          if (clockwise) {
            newBoard[col][boardSize - 1 - row] = board[row][col];
          } else {
            newBoard[boardSize - 1 - col][row] = board[row][col];
          }
        }
      }
      return newBoard;
    }

    let touchStartX = 0, touchStartY = 0;

    document.addEventListener("touchstart", e => {
      touchStartX = e.touches[0].clientX;
      touchStartY = e.touches[0].clientY;
    });

    document.addEventListener("touchend", e => {
      const deltaX = e.changedTouches[0].clientX - touchStartX;
      const deltaY = e.changedTouches[0].clientY - touchStartY;

      if (Math.abs(deltaX) > Math.abs(deltaY)) {
        handleMove(deltaX > 0 ? "right" : "left");
      } else {
        handleMove(deltaY > 0 ? "down" : "up");
      }
    });

    document.addEventListener("keydown", e => {
      if (e.key === "ArrowUp") handleMove("up");
      if (e.key === "ArrowDown") handleMove("down");
      if (e.key === "ArrowLeft") handleMove("left");
      if (e.key === "ArrowRight") handleMove("right");
    });

    initBoard();
  </script>

  <!-- Adicionando o script do Bootstrap -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
